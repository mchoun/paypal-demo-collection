<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" type="text/css"
    href="https://www.paypalobjects.com/webstatic/en_US/developer/docs/css/cardfields.css" />
  <script
    src="https://www.paypal.com/sdk/js?client-id=<%= clientId %>&currency=USD&buyer-country=US&components=applepay"></script>

</head>

<body>
  <div id="applepay-container"></div>

  <script>
    async function setupApplepay() {
      const applepay = paypal.Applepay();
      const {
        isEligible,
        countryCode,
        currencyCode,
        merchantCapabilities,
        supportedNetworks,
      } = await applepay.config();

      if (!isEligible) {
        throw new Error("applepay is not eligible");
      }

      document.getElementById("applepay-container").innerHTML =
        '<apple-pay-button id="btn-appl" buttonstyle="black" type="buy" locale="en">';

      document.getElementById("btn-appl").addEventListener("click", onClick);

      async function onClick() {
        console.log({ merchantCapabilities, currencyCode, supportedNetworks })

        const paymentRequest = {
          countryCode,
          currencyCode: 'USD',
          merchantCapabilities,
          supportedNetworks,
          requiredBillingContactFields: [
            "name",
            "phone",
            "email",
            "postalAddress",
          ],
          requiredShippingContactFields: [
          ],
          total: {
            label: "Demo (Card is not charged)",
            amount: "0.01",
            type: "final",
          },
        };

        var session = new ApplePaySession(4, paymentRequest);

        session.onvalidatemerchant = (event) => {
          applepay
            .validateMerchant({
              validationUrl: event.validationURL,
            })
            .then((payload) => {
              session.completeMerchantValidation(payload.merchantSession);
            })
            .catch((err) => {
              console.error(err);
              session.abort();
            });
        };

        session.onpaymentmethodselected = (event) => {
          session.completePaymentMethodSelection({
            newTotal: paymentRequest.total,
          });
        };

        session.onpaymentauthorized = async (event) => {
          try {
            const order = {
              intent: "CAPTURE",
              purchase_units: [
                {
                  amount: {
                    currency_code: "USD",
                    value: paymentRequest.total.amount,
                  },
                  payee: {
                    merchant_id: "2V9L63AM2BYKC",
                  },
                },
              ],
            }

            /* Create Order on the Server Side */
            const orderResponse = await fetch(`/api/orders`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(order)
            })
            if (!orderResponse.ok) {
              throw new Error("error creating order")
            }

            const { id } = await orderResponse.json()
            console.log({ id })
            /**
             * Confirm Payment 
             */
            await applepay.confirmOrder({ orderId: id, token: event.payment.token, billingContact: event.payment.billingContact, shippingContact: event.payment.shippingContact });

            /*
            * Capture order (must currently be made on server)
            */
            await fetch(`/api/orders/${id}/capture`, {
              method: 'POST',
            });

            session.completePayment({
              status: window.ApplePaySession.STATUS_SUCCESS,
            });
          } catch (err) {
            console.error(err);
            session.completePayment({
              status: window.ApplePaySession.STATUS_FAILURE,
            });
          }
        };

        session.oncancel = (event) => {
          console.log("Apple Pay Cancelled !!")
        }

        session.begin();
      }
    }

    document.addEventListener("DOMContentLoaded", (event) => {

      if (ApplePaySession?.supportsVersion(4) && ApplePaySession?.canMakePayments()) {
        setupApplepay().catch(console.error);
      }
    });
  </script>
</body>

</html>