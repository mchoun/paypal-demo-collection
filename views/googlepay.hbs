<div id="button-container"></div>

<script>
  (async () => {


    let buttonContainer = document.querySelector('#button-container');

    //Create client token to be used with BT client
    const clientToken = await fetch("/api/client_token")
      .then(response => response.text())
      .catch(error => console.log('error', error));

    //Initializing Braintree, Google Pay, and Google Pay API
    const btClient = braintree.client.create({ authorization: clientToken });
    const gPayClient = btClient.then(clientInstance => braintree.googlePayment.create(
      {
        client: clientInstance,
        googlePayVersion: 2,
        //googleMerchantId: '' omitted for TEST / Sandbox environment
      }));
    const paymentsClient = new google.payments.api.PaymentsClient({ environment: 'TEST' });


    gPayClient
      .then(async googlePaymentInstance => {
        let readyToPay = await paymentsClient.isReadyToPay({
          apiVersion: 2,
          apiVersionMinor: 0,
          allowedPaymentMethods: googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods,
          existingPaymentMethodrequire: true
        });

        if (readyToPay.result) {

          //TODO: Prefetch can also be used. Otherwise this information should be executed on the onClick event. Parsed out and sent to the BT server side implementation
          const button = paymentsClient.createButton({
            buttonColor: 'default',
            buttonType: 'buy',
            onClick: () => sendPaymentRequest()
          });

          buttonContainer.appendChild(button);

          function sendPaymentRequest() {
            let paymentDataRequest = googlePaymentInstance.createPaymentDataRequest({
              transactionInfo: {
                currencyCode: 'USD',
                totalPriceStatus: 'FINAL',
                totalPrice: '1.00'
              }
            });

            let cardPaymentMethod = paymentDataRequest.allowedPaymentMethods[0];
            cardPaymentMethod.parameters.billingAddressRequired = true;
            cardPaymentMethod.parameters.billingAddressParameters = {
              format: 'FULL',
              phoneNumberRequired: true
            };

            paymentsClient.loadPaymentData(paymentDataRequest)
            .then( paymentData => googlePaymentInstance.parseResponse(paymentData))
            .then( result => {
              fetch('/api/checkout',
              {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ "paymentMethodNonce": result.nonce})
              })
              .then(result => result.json())
              .then(result => console.log(result))
              .catch(err => console.log(err))
            })
              .catch(err => console.error(err))
          }

        }

      }).catch(err => console.log(err))


  })();
</script>