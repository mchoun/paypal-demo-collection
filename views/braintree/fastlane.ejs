<!DOCTYPE html>
<html>

<head>
  <title>
    <%= title %>
  </title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="/public/stylesheets/style.css">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- includes the Braintree JS client SDK -->
  <script src="https://assets.braintreegateway.com/web/3.97.4-connect-alpha.6.3/js/client.min.js"></script>
  <script src="https://assets.braintreegateway.com/web/3.97.4-connect-alpha.6.3/js/connect.min.js"></script>
  <script src="https://assets.braintreegateway.com/web/3.97.4-connect-alpha.6.3/js/data-collector.min.js"></script>

  <!-- includes jQuery -->
  <script src="http://code.jquery.com/jquery-3.2.1.min.js" crossorigin="anonymous"></script>
</head>

<body>
  <div class="container-sm">

    <div>
      <label for="email">Email</label>
      <input type="text" id="email" />
      <div id="watermark-container"></div>
    </div>
    <button id="email-button">Button!</button>

    <button disabled id="change-address-button">Change Address</button>
    <button disabled id="change-card-button">Change Card</button>


    <!-- Div container for the Payment Component -->
    <div id="payment-container"></div>
    <!-- Submit Button -->
    <button id="submit-button">Submit Order</button>

  </div>


  <script>
    (async () => {
      window.localStorage.setItem("axoEnv", "sandbox");
      var form = document.querySelector('#hosted-fields-form');
      var submit = document.querySelector('input[type="submit"]');

      let clientToken = await fetch("/api/client-token")
        .then(response => response.text())
        .catch(error => console.log('error', error));

      const clientInstance = await braintree.client.create({
        // Insert your tokenization key here
        authorization: clientToken
      })

      const dataCollectorInstance = await braintree.dataCollector.create({
        client: clientInstance,
        riskCorrelationId: `${crypto.randomUUID()}`
      });

      const deviceData = dataCollectorInstance.deviceData;

      const styles = {
        input: {
          "borderRadius": "15px"
        },
        toggle: {
          colorPrimary: "darkorange",
          colorSecondary: "#222222"
        },
        text: {
          body: {
            color: "#222222",
            fontSize: "12px"
          }
        }
      };

      const connect = await braintree.connect.create({
        authorization: clientToken,
        client: clientInstance,
        deviceData: deviceData,
        styles: styles
      })

      console.log(connect)

      const identity = connect.identity;
      const profile = connect.profile;

      const connectWatermark = connect.ConnectWatermarkComponent({
        includeAdditionalInfo: true
      }).render("#watermark-container");

      const emailButton = document.getElementById("email-button")
      const submitButton = document.getElementById("submit-button");

      emailButton.addEventListener('click', async () => {

        console.log('button clicked')

        const { customerContextId } = await identity.lookupCustomerByEmail(document.getElementById("email").value)

        if (customerContextId) {
          const changeAddressButton = document.getElementById('change-address-button')
          const changeCardButton = document.getElementById('change-card-button')
          changeAddressButton.disabled = false
          changeCardButton.disabled = false

          changeCardButton.addEventListener('click', async () => {
            const { selectionChanged, selectedCard } = await profile.showCardSelector();

            if (selectionChanged) {
              console.log(`Card Changed! : ${JSON.stringify(selectedCard, null, 2)}`)
            } else {
              console.log('No selection changed', selectionChanged, selectedCard)
            }
          })

          changeAddressButton.addEventListener('click', async () => {
            const { selectionChanged, selectedAddress } = await profile.showShippingAddressSelector();

            if (selectionChanged) {
              console.log(`Address Changed! : ${JSON.stringify(selectedAddress, null, 2)}`)
            } else {
              console.log('No selection changed', selectionChanged, selectedAddress)
            }
          })

          console.log(`Hey! You've got an account: ${customerContextId}`)
          const customerAuthData = await identity.triggerAuthenticationFlow(customerContextId)
          const { authenticationState, profileData } = customerAuthData

          console.log(customerAuthData)

          if (authenticationState === 'succeeded') {
            const { name, shippingAddress, card } = profileData
            console.log(profileData)

            submitButton.addEventListener("click", async () => {
              const response = await fetch('/api/checkout',
                {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ "paymentMethodNonce": card.id })
                })
            });


          } else {
            console.log('Authentication failed')
          }



        } else {
          const fields = {
            phoneNumber: {
              prefill: "1234567890"
            },
            cardholderName: {}  // optionally pass this to show the card holder name
          };

          const connectCardComponent = await connect.ConnectCardComponent({ fields }).render("#payment-container")

          submitButton.addEventListener("click", async () => {
            const { nonce } = await connectCardComponent.tokenize({
              billingAddress: {
                streetAddress: "2211 North 1st St",
                locality: "San Jose",
                region: "CA",
                postalCode: "95131",
                countryCodeAlpha2: "US" // you can also use the countryCodeAlpha3
                // or countryCodeNumeric formats
              }
            });

            console.log(nonce)
            // Send the nonce and previously captured device data to server
            // to complete checkout
          });
        }
      })


    })();
  </script>
</body>

</html>