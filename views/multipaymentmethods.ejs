<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <!-- includes the Braintree JS client SDK -->
<script src="https://js.braintreegateway.com/web/3.85.2/js/client.min.js"></script>
<script src="https://js.braintreegateway.com/web/3.85.2/js/paypal-checkout.min.js"></script>
<script src="https://js.braintreegateway.com/web/3.85.2/js/data-collector.min.js"></script>
<script src="https://pay.google.com/gp/p/js/pay.js"></script>
<script src="https://js.braintreegateway.com/web/3.85.2/js/google-payment.min.js"></script>

  </head>
  <body>

<div id="paypal-button"></div>
<div id="button-container"></div>

<script>
  (async () => {

    let myDeviceData;
    let buttonContainer = document.querySelector('#button-container');

    let clientToken = await fetch("/api/client-token")
      .then(response => response.text())
      .catch(error => console.log('error', error));
    
    const btClient = braintree.client.create({ authorization: clientToken });
    const gPayClient = btClient.then(clientInstance => braintree.googlePayment.create(
      {
        client: clientInstance,
        googlePayVersion: 2,
        //googleMerchantId: '' omitted for TEST / Sandbox environment
      }));
    const ppCheckoutClient = btClient.then(clientInstance => braintree.paypalCheckout.create({ client: clientInstance }));
    const paymentsClient = new google.payments.api.PaymentsClient({ environment: 'TEST' });



    ppCheckoutClient
      .then(paypalCheckoutInstance => paypalCheckoutInstance.loadPayPalSDK({
         currency: 'USD',
         intent: 'capture' 
         }))
      .then((paypalCheckoutInstance) => {
      return paypal.Buttons({
        fundingSource: paypal.FUNDING.PAYPAL,
        createOrder: () => {
          return paypalCheckoutInstance.createPayment({
            flow: 'checkout',
            amount: 1.00,
            currency: 'USD',
            intent: 'capture',
            enableShippingAddress: true,
            shippingAddressEditable: false,
            shippingAddressOverride: {
              recipientName: 'Scruff McGruff',
              line1: '1234 Main St.',
              line2: 'Unit 1',
              city: 'Chicago',
              countryCode: 'US',
              postalCode: '60652',
              state: 'IL',
              phone: '123.456.7890'
            },
            displayName: 'This is an apple'
          });
        },

        onApprove: (data, actions) => {
           paypalCheckoutInstance.tokenizePayment(data).then(payload => {
            fetch('/api/checkout',
              {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ "paymentMethodNonce": payload.nonce})
              })
              .then(result => result.json())
              .then(result => console.log(result))
              .catch(err => console.log(err))
          })
        },

        onCancel: (data) => {
          console.log('PayPal payment canceled', JSON.stringify(data, 0, 2));
        },

        onError: (err) => {
          console.error('PayPal error', err);
        }
      }).render('#paypal-button');
    }).then(() => {

    }).catch(err => console.error(err));

gPayClient
      .then(async googlePaymentInstance => {
        let readyToPay = await paymentsClient.isReadyToPay({
          apiVersion: 2,
          apiVersionMinor: 0,
          allowedPaymentMethods: googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods,
          existingPaymentMethodrequire: true
        });

        if (readyToPay.result) {

          //TODO: Prefetch can also be used. Otherwise this information should be executed on the onClick event. Parsed out and sent to the BT server side implementation
          const button = paymentsClient.createButton({
            buttonColor: 'default',
            buttonType: 'buy',
            onClick: () => sendPaymentRequest()
          });

          buttonContainer.appendChild(button);

          function sendPaymentRequest() {
            let paymentDataRequest = googlePaymentInstance.createPaymentDataRequest({
              transactionInfo: {
                currencyCode: 'USD',
                totalPriceStatus: 'FINAL',
                totalPrice: '1.00'
              }
            });

            let cardPaymentMethod = paymentDataRequest.allowedPaymentMethods[0];
            cardPaymentMethod.parameters.billingAddressRequired = true;
            cardPaymentMethod.parameters.billingAddressParameters = {
              format: 'FULL',
              phoneNumberRequired: true
            };

            paymentsClient.loadPaymentData(paymentDataRequest)
            .then( paymentData => googlePaymentInstance.parseResponse(paymentData))
            .then( result => {
              fetch('/api/checkout',
              {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({ "paymentMethodNonce": result.nonce})
              })
              .then(result => result.json())
              .then(result => console.log(result))
              .catch(err => console.log(err))
            })
              .catch(err => console.error(err))
          }

        }

      }).catch(err => console.log(err))




  })();
</script>
  </body>
</html>